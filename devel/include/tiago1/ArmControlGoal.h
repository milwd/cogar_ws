// Generated by gencpp from file tiago1/ArmControlGoal.msg
// DO NOT EDIT!


#ifndef TIAGO1_MESSAGE_ARMCONTROLGOAL_H
#define TIAGO1_MESSAGE_ARMCONTROLGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiago1
{
template <class ContainerAllocator>
struct ArmControlGoal_
{
  typedef ArmControlGoal_<ContainerAllocator> Type;

  ArmControlGoal_()
    : degree(0)  {
    }
  ArmControlGoal_(const ContainerAllocator& _alloc)
    : degree(0)  {
  (void)_alloc;
    }



   typedef int32_t _degree_type;
  _degree_type degree;





  typedef boost::shared_ptr< ::tiago1::ArmControlGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago1::ArmControlGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ArmControlGoal_

typedef ::tiago1::ArmControlGoal_<std::allocator<void> > ArmControlGoal;

typedef boost::shared_ptr< ::tiago1::ArmControlGoal > ArmControlGoalPtr;
typedef boost::shared_ptr< ::tiago1::ArmControlGoal const> ArmControlGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago1::ArmControlGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago1::ArmControlGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago1::ArmControlGoal_<ContainerAllocator1> & lhs, const ::tiago1::ArmControlGoal_<ContainerAllocator2> & rhs)
{
  return lhs.degree == rhs.degree;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago1::ArmControlGoal_<ContainerAllocator1> & lhs, const ::tiago1::ArmControlGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiago1::ArmControlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago1::ArmControlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago1::ArmControlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago1::ArmControlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago1::ArmControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago1::ArmControlGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago1::ArmControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4e0ba4860b4ebee3638b4876ab39423";
  }

  static const char* value(const ::tiago1::ArmControlGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4e0ba4860b4ebeeULL;
  static const uint64_t static_value2 = 0x3638b4876ab39423ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago1::ArmControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago1/ArmControlGoal";
  }

  static const char* value(const ::tiago1::ArmControlGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago1::ArmControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"int32 degree\n"
;
  }

  static const char* value(const ::tiago1::ArmControlGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago1::ArmControlGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.degree);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmControlGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago1::ArmControlGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago1::ArmControlGoal_<ContainerAllocator>& v)
  {
    s << indent << "degree: ";
    Printer<int32_t>::stream(s, indent + "  ", v.degree);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO1_MESSAGE_ARMCONTROLGOAL_H
