// Generated by gencpp from file tiago1/send_orderRequest.msg
// DO NOT EDIT!


#ifndef TIAGO1_MESSAGE_SEND_ORDERREQUEST_H
#define TIAGO1_MESSAGE_SEND_ORDERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tiago1/Voice_rec.h>

namespace tiago1
{
template <class ContainerAllocator>
struct send_orderRequest_
{
  typedef send_orderRequest_<ContainerAllocator> Type;

  send_orderRequest_()
    : order()  {
    }
  send_orderRequest_(const ContainerAllocator& _alloc)
    : order(_alloc)  {
  (void)_alloc;
    }



   typedef  ::tiago1::Voice_rec_<ContainerAllocator>  _order_type;
  _order_type order;





  typedef boost::shared_ptr< ::tiago1::send_orderRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago1::send_orderRequest_<ContainerAllocator> const> ConstPtr;

}; // struct send_orderRequest_

typedef ::tiago1::send_orderRequest_<std::allocator<void> > send_orderRequest;

typedef boost::shared_ptr< ::tiago1::send_orderRequest > send_orderRequestPtr;
typedef boost::shared_ptr< ::tiago1::send_orderRequest const> send_orderRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago1::send_orderRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago1::send_orderRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago1::send_orderRequest_<ContainerAllocator1> & lhs, const ::tiago1::send_orderRequest_<ContainerAllocator2> & rhs)
{
  return lhs.order == rhs.order;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago1::send_orderRequest_<ContainerAllocator1> & lhs, const ::tiago1::send_orderRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiago1::send_orderRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago1::send_orderRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago1::send_orderRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago1::send_orderRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago1::send_orderRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago1::send_orderRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago1::send_orderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4f6fe1e5b6183c9cba764c155d0803b";
  }

  static const char* value(const ::tiago1::send_orderRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4f6fe1e5b6183c9ULL;
  static const uint64_t static_value2 = 0xcba764c155d0803bULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago1::send_orderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago1/send_orderRequest";
  }

  static const char* value(const ::tiago1::send_orderRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago1::send_orderRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago1/Voice_rec order\n"
"\n"
"================================================================================\n"
"MSG: tiago1/Voice_rec\n"
"int32 id_client\n"
"string[] list_of_orders\n"
;
  }

  static const char* value(const ::tiago1::send_orderRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago1::send_orderRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct send_orderRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago1::send_orderRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago1::send_orderRequest_<ContainerAllocator>& v)
  {
    s << indent << "order: ";
    s << std::endl;
    Printer< ::tiago1::Voice_rec_<ContainerAllocator> >::stream(s, indent + "  ", v.order);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO1_MESSAGE_SEND_ORDERREQUEST_H
