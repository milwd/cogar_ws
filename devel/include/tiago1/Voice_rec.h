// Generated by gencpp from file tiago1/Voice_rec.msg
// DO NOT EDIT!


#ifndef TIAGO1_MESSAGE_VOICE_REC_H
#define TIAGO1_MESSAGE_VOICE_REC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiago1
{
template <class ContainerAllocator>
struct Voice_rec_
{
  typedef Voice_rec_<ContainerAllocator> Type;

  Voice_rec_()
    : id_client(0)
    , list_of_orders()  {
    }
  Voice_rec_(const ContainerAllocator& _alloc)
    : id_client(0)
    , list_of_orders(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_client_type;
  _id_client_type id_client;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _list_of_orders_type;
  _list_of_orders_type list_of_orders;





  typedef boost::shared_ptr< ::tiago1::Voice_rec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago1::Voice_rec_<ContainerAllocator> const> ConstPtr;

}; // struct Voice_rec_

typedef ::tiago1::Voice_rec_<std::allocator<void> > Voice_rec;

typedef boost::shared_ptr< ::tiago1::Voice_rec > Voice_recPtr;
typedef boost::shared_ptr< ::tiago1::Voice_rec const> Voice_recConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago1::Voice_rec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago1::Voice_rec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago1::Voice_rec_<ContainerAllocator1> & lhs, const ::tiago1::Voice_rec_<ContainerAllocator2> & rhs)
{
  return lhs.id_client == rhs.id_client &&
    lhs.list_of_orders == rhs.list_of_orders;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago1::Voice_rec_<ContainerAllocator1> & lhs, const ::tiago1::Voice_rec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiago1::Voice_rec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago1::Voice_rec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago1::Voice_rec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago1::Voice_rec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago1::Voice_rec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago1::Voice_rec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago1::Voice_rec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4a95f50c96541db33e3cde77c3a65f4";
  }

  static const char* value(const ::tiago1::Voice_rec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4a95f50c96541dbULL;
  static const uint64_t static_value2 = 0x33e3cde77c3a65f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago1::Voice_rec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago1/Voice_rec";
  }

  static const char* value(const ::tiago1::Voice_rec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago1::Voice_rec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id_client\n"
"string[] list_of_orders\n"
;
  }

  static const char* value(const ::tiago1::Voice_rec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago1::Voice_rec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id_client);
      stream.next(m.list_of_orders);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Voice_rec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago1::Voice_rec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago1::Voice_rec_<ContainerAllocator>& v)
  {
    s << indent << "id_client: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id_client);
    s << indent << "list_of_orders[]" << std::endl;
    for (size_t i = 0; i < v.list_of_orders.size(); ++i)
    {
      s << indent << "  list_of_orders[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.list_of_orders[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO1_MESSAGE_VOICE_REC_H
